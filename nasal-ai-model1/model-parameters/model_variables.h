/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef _EI_CLASSIFIER_MODEL_VARIABLES_H_
#define _EI_CLASSIFIER_MODEL_VARIABLES_H_

#include <stdint.h>
#include "model_metadata.h"
#include "anomaly_metadata.h"
#include "tflite-model/tflite_learn_12_compiled.h"

#include "edge-impulse-sdk/classifier/ei_model_types.h"
#include "edge-impulse-sdk/classifier/inferencing_engines/engines.h"

const char* ei_classifier_inferencing_categories[] = { "coffee", "irish cream", "kahlua", "rum" };

uint8_t ei_dsp_config_87_axes[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60 };
const uint32_t ei_dsp_config_87_axes_size = 61;
ei_dsp_config_flatten_t ei_dsp_config_87 = {
    87, // uint32_t blockId
    1, // int implementationVersion
    61, // int length of axes
    1.0f, // float scale-axes
    true, // boolean average
    true, // boolean minimum
    true, // boolean maximum
    true, // boolean rms
    true, // boolean stdev
    false, // boolean skewness
    false // boolean kurtosis
};

const size_t ei_dsp_blocks_size = 1;
ei_model_dsp_t ei_dsp_blocks[ei_dsp_blocks_size] = {
    { // DSP block 87
        87,
        305,
        &extract_flatten_features,
        (void*)&ei_dsp_config_87,
        ei_dsp_config_87_axes,
        ei_dsp_config_87_axes_size
    }
};
const ei_config_tflite_eon_graph_t ei_config_tflite_graph_12 = {
    .implementation_version = 1,
    .model_init = &tflite_learn_12_init,
    .model_invoke = &tflite_learn_12_invoke,
    .model_reset = &tflite_learn_12_reset,
    .model_input = &tflite_learn_12_input,
    .model_output = &tflite_learn_12_output,
};


const ei_learning_block_config_tflite_graph_t ei_learning_block_config_12 = {
    .implementation_version = 1,
    .block_id = 12,
    .object_detection = 0,
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .output_data_tensor = 0,
    .output_labels_tensor = 1,
    .output_score_tensor = 2,
    .quantized = 0,
    .compiled = 1,
    .graph_config = (void*)&ei_config_tflite_graph_12
};

const ei_learning_block_config_anomaly_kmeans_t ei_learning_block_config_14 = {
    .implementation_version = 1,
    .anom_axis = ei_classifier_anom_axes,
    .anom_axes_size = 61,
    .anom_clusters = ei_classifier_anom_clusters,
    .anom_cluster_count = 32,
    .anom_scale = ei_classifier_anom_scale,
    .anom_mean = ei_classifier_anom_mean,
};

const size_t ei_learning_blocks_size = 2;
const uint32_t ei_learning_block_12_inputs[1] = { 87 };
const uint32_t ei_learning_block_12_inputs_size = 1;
const uint32_t ei_learning_block_14_inputs[1] = { 87 };
const uint32_t ei_learning_block_14_inputs_size = 1;
const ei_learning_block_t ei_learning_blocks[ei_learning_blocks_size] = {
    {
        12,
        false,
        &run_nn_inference,
        (void*)&ei_learning_block_config_12,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_12_inputs,
        ei_learning_block_12_inputs_size,
        4
    },
    {
        14,
        false,
        &run_kmeans_anomaly,
        (void*)&ei_learning_block_config_14,
        EI_CLASSIFIER_IMAGE_SCALING_NONE,
        ei_learning_block_14_inputs,
        ei_learning_block_14_inputs_size,
        1
    },
};

const ei_model_performance_calibration_t ei_calibration = {
    1, /* integer version number */
    false, /* has configured performance calibration */
    (int32_t)(EI_CLASSIFIER_RAW_SAMPLE_COUNT / ((EI_CLASSIFIER_FREQUENCY > 0) ? EI_CLASSIFIER_FREQUENCY : 1)) * 1000, /* Model window */
    0.8f, /* Default threshold */
    (int32_t)(EI_CLASSIFIER_RAW_SAMPLE_COUNT / ((EI_CLASSIFIER_FREQUENCY > 0) ? EI_CLASSIFIER_FREQUENCY : 1)) * 500, /* Half of model window */
    0   /* Don't use flags */
};

const ei_impulse_t impulse_345407_3 = {
    .project_id = 345407,
    .project_owner = "Vaibhavi",
    .project_name = "nasal-ai",
    .deploy_version = 3,

    .nn_input_frame_size = 305,
    .raw_sample_count = 1,
    .raw_samples_per_frame = 61,
    .dsp_input_frame_size = 1 * 61,
    .input_width = 0,
    .input_height = 0,
    .input_frames = 0,
    .interval_ms = 1666.6666666666667,
    .frequency = 0.6,
    .dsp_blocks_size = ei_dsp_blocks_size,
    .dsp_blocks = ei_dsp_blocks,
    
    .object_detection = 0,
    .object_detection_count = 0,
     
    .object_detection_threshold = 0,
     
    .object_detection_last_layer = EI_CLASSIFIER_LAST_LAYER_UNKNOWN,
    .fomo_output_size = 0,
    
    .tflite_output_features_count = 4,
    .learning_blocks_size = ei_learning_blocks_size,
    .learning_blocks = ei_learning_blocks,

    .inferencing_engine = EI_CLASSIFIER_TFLITE,

    .sensor = EI_CLASSIFIER_SENSOR_FUSION,
    .fusion_string = "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25 + 26 + 27 + 28 + 29 + 30 + 31 + 32 + 33 + 34 + 35 + 36 + 37 + 38 + 39 + 40 + 41 + 42 + 43 + 44 + 45 + 46 + 47 + 48 + 49 + 50 + 51 + 52 + 53 + 54 + 55 + 56 + 60 + 61 + 62 + 63 + 64",
    .slice_size = (1/4),
    .slices_per_model_window = 4,

    .has_anomaly = EI_ANOMALY_TYPE_KMEANS,
    .label_count = 4,
    .calibration = ei_calibration,
    .categories = ei_classifier_inferencing_categories
};

const ei_impulse_t& ei_default_impulse = impulse_345407_3;

#endif // _EI_CLASSIFIER_MODEL_METADATA_H_
